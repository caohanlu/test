
3.10.4 表连接
如果多个表存在一定关联关系【一般都是某字段值相等】，可以多表在一起进行查询操作


简单多表查询

多个表数据可以联合查询，语法格式如下：
select  字段1,字段2... from 表1,表2... [where 条件]

如下，查询两张表的行中，name字段相同,并且class_1表的分数字段大于90的行
select * from class_1,person
where class_1.name=person.name and class_1.score>90;
             左边是class_1表的内容 |||||||右边是person表的内容
+----+------+-----+------+-------+----+------+------+------+----------+------------+---------+
| id | name | age | sex  | score | id | name | age  | sex  | salary   | hire_date  | dept_id |
+----+------+-----+------+-------+----+------+------+------+----------+------------+---------+
|  1 | Lily |  20 | w    |    92 |  1 | Lily |   29 | w    | 20000.00 | 2017-04-03 |       2 |
+----+------+-----+------+-------+----+------+------+------+----------+------------+---------+

如下，查询两张表的行中，name字段相同的行，只查询class_1表的name字段，和person表的salary薪水字段
select class_1.name,person.salary
from class_1,person
where class_1.name=person.name and person.salary>10000 ;
+------+----------+
| name | salary   |
+------+----------+
| Lily | 20000.00 |
+------+----------+

必须使用where，找到两个表的关系，否则如下
笛卡尔积
笛卡尔积就是将A表的每一条记录与B表的每一条记录强行拼在一起。
所以，如果A表有n条记录，B表有m条记录，笛卡尔积产生的结果就会产生n*m条记录。









内连接
【效果跟上面的多表查询一样，只是写法不一样】
    内连接查询只会查找到符合条件的记录，其实结果和上面多表查询是一样的,官方更推荐使用内连接查询。

SELECT 字段列表
FROM 表1  INNER JOIN  表2
ON 表1.字段 = 表2.字段
where 条件;


例如
select class_1.name,person.salary
from class_1 inner join person
on class_1.name=person.name    把两个表的关联关系写在on后面
where person.salary>10000;     条件后在where里

例如
select *
from person inner join dept
on person.dept_id =dept.id
where person.salary>20000;
+----+------+------+------+----------+------------+---------+----+-----------+
| id | name | age  | sex  | salary   | hire_date  | dept_id | id | dname     |
+----+------+------+------+----------+------------+---------+----+-----------+
|  3 | Joy  |   30 | m    | 28000.00 | 2016-04-03 |       1 |  1 | 技术部    |
|  6 | Jame |   32 | m    | 22000.00 | 2017-04-07 |       3 |  3 | 市场部    |
+----+------+------+------+----------+------------+---------+----+-----------+
2 rows in set (0.00 sec)


例如
select dname,name
from dept inner join person
on dept.id =person.dept_id;








左连接:【用的比较多】
    左表为主表，显示左表全部、以及右表中与左表匹配的项

如下，表1就是左表:
SELECT 字段列表
    FROM 表1  LEFT JOIN  表2
ON 表1.字段 = 表2.字段;


select * from person left join  dept  on  person.dept_id =dept.id;

# 查询每个部门员工人数,因为有的部门可能没人，所以用左连接
select dname,count(name)
from dept left join person
on dept.id=person.dept_id
group by dname;







右连接 ：
    右表为主表，显示右表全部内容，以及左表中与右表匹配的项

如下，表1就是左表
SELECT 字段列表
    FROM 表1  RIGHT JOIN  表2
ON 表1.字段 = 表2.字段;

select * from person right join  dept  on  person.dept_id =dept.id;

> 注意：我们尽量使用数据量大的表作为基准表，即左表

select *
from person right join dept
on person.dept_id =dept.id;
如下把右表，部门全部显示出来了，但是有的部门没有对应的员工，则别的字段显示null
+------+------+------+------+----------+------------+---------+----+-----------------+
| id   | name | age  | sex  | salary   | hire_date  | dept_id | id | dname           |
+------+------+------+------+----------+------------+---------+----+-----------------+
|    1 | Lily |   29 | w    | 20000.00 | 2017-04-03 |       2 |  2 | 销售部          |
|    2 | Tom  |   27 | m    | 16000.00 | 2019-10-03 |       1 |  1 | 技术部          |
|    3 | Joy  |   30 | m    | 28000.00 | 2016-04-03 |       1 |  1 | 技术部          |
|    4 | Emma |   24 | w    |  8000.00 | 2019-05-08 |       4 |  4 | 行政部          |
|    5 | Abby |   28 | w    | 17000.00 | 2018-11-03 |       3 |  3 | 市场部          |
|    6 | Jame |   32 | m    | 22000.00 | 2017-04-07 |       3 |  3 | 市场部          |
| NULL | NULL | NULL | NULL |     NULL | NULL       |    NULL |  5 | 财务部          |
| NULL | NULL | NULL | NULL |     NULL | NULL       |    NULL |  6 | 总裁办公室      |
+------+------+------+------+----------+------------+---------+----+-----------------+
8 rows in set (0.00 sec)








多个表进行外链接查询，用的不多，前提是多张表有关系
select * from
class left join student
on class.cid = student.class_id
left join score
on student.sid=score.student_id;

例如三张表查询
mysql> select * from class left join student on class.cid=student.class_id left join score on student.sid=student_id;
                                                                           左边查询结果，作为左表，跟右边score表join

+-----+--------------+------+--------+--------+----------+------+------------+-----------+--------+
| cid | caption      | sid  | sname  | gender | class_id | sid  | student_id | course_id | number |
+-----+--------------+------+--------+--------+----------+------+------------+-----------+--------+
|   1 | 三年二班     |    1 | 钢蛋   | female |        1 |    1 |          1 |         1 |     60 |
|   1 | 三年二班     |    1 | 钢蛋   | female |        1 |    2 |          1 |         2 |     59 |
|   1 | 三年二班     |    2 | 铁锤   | female |        1 |    3 |          2 |         2 |    100 |
|   2 | 三年三班     |    3 | 山炮   | male   |        2 |    4 |          3 |         2 |     78 |
|   3 | 三年一班     |    4 | 彪哥   | male   |        3 |    5 |          4 |         3 |     66 |
+-----+--------------+------+--------+--------+----------+------+------------+-----------+--------+
5 rows in set (0.00 sec)






练习1:
班级学生表，一对多关系
create table class(cid int primary key auto_increment,
                  caption char(4) not null);
create table student(sid int primary key auto_increment,
                    sname varchar(32) not null,
                    gender enum('male','female','others') not null default 'male',
                    class_id int,
                    foreign key(class_id) references class(cid) on update cascade on delete cascade);

老师教课程，一对多关系
create table teacher(tid int primary key auto_increment,
                    tname varchar(32) not null);
create table course(cid int primary key auto_increment,
                   cname varchar(16) not null,
                   teacher_id int,
                   foreign key(teacher_id) references teacher(tid) on update cascade on delete cascade);

学生、课程是多对多关系，创建关系表，分数也在里面
create table score(sid int primary key auto_increment,
                  student_id int,
                  course_id int,
                  number int(3) not null,
                  foreign key(student_id) references student(sid) on update cascade on delete cascade,
                  foreign key(course_id) references course(cid) on update cascade on delete cascade);
插入数据：
insert into class(caption) values('三年二班'),('三年三班'),('三年一班');
insert into teacher(tname) values('波多老师'),('苍老师'),('小泽老师');
insert into student(sname,gender,class_id) values('钢蛋','female',1),('铁锤','female',1),('山炮','male',2),('彪哥','male',3);
insert into course(cname,teacher_id) values('生物',1),('体育',1),('物理',2);
insert into score(student_id,course_id,number) values(1,1,60),(1,2,59),(2,2,100),(3,2,78),(4,3,66);


先确定需要的数据来自哪些表，然后join在一起，然后处理

1. 查询每位老师教授的课程数量
因为有的老师可能没教课，所以用左连接
分组以tname分组，但是不能count(tname),因为小泽老师根本没教课，但是count(tname)的结果是1，所以要count(teacher_id)
mysql> select * from teacher left join course on tid=teacher_id;
+-----+--------------+------+--------+------------+
| tid | tname        | cid  | cname  | teacher_id |
+-----+--------------+------+--------+------------+
|   1 | 波多老师     |    1 | 生物   |          1 |
|   1 | 波多老师     |    2 | 体育   |          1 |
|   2 | 苍老师       |    3 | 物理   |          2 |
|   3 | 小泽老师     | NULL | NULL   |       NULL |
+-----+--------------+------+--------+------------+
4 rows in set (0.00 sec)
结果如下
mysql> select tname,count(teacher_id) from teacher left join course on tid=teacher_id group by tname;
+--------------+-------------------+
| tname        | count(teacher_id) |
+--------------+-------------------+
| 小泽老师     |                 0 |
| 波多老师     |                 2 |
| 苍老师       |                 1 |
+--------------+-------------------+
3 rows in set (0.00 sec)


2. 查询学生的信息及学生所在班级信息
mysql> select * from student left join class on class_id=cid;

3. 查询各科成绩最高和最低的分数,形式 : 课程ID  最高分  最低分
mysql> select course_id,max(number),min(number) from score group by course_id;

4. 查询平均成绩大于85分的所有学生学号,姓名和平均成绩
select student_id,sname,avg(number)
from score left join student
on student_id=student.sid
group by student_id,sname
having avg(number)>85;

5. 查询课程编号为2且课程成绩在80以上的学生学号和姓名
mysql> select student.sid,sname from student inner join score on student.sid=student_id where course_id=2 and number>80;

6. 查询各个课程及相应的选修人数
mysql> select course_id,cname,count(*) from score right join course on cid=course_id  group by course_id,cname;

















3.11 视图
视图是存储的查询语句,当调用的时候,产生结果集,视图充当的是虚拟表的角色。
select查询语句复杂、高频时，可以把查询到的数据，映射成虚拟表，或快捷方式，或映像，是二维表，不占用硬盘空间；
其实视图可以理解为一个表或多个表中导出来的表，作用和真实表一样，包含一系列带有行和列的数据 视图中，

用户可以使用SELECT语句查询数据，

也可以使用INSERT，UPDATE，DELETE修改记录，但是受原来真实表的限制，比如数据类型、约束等，

原表内容变化，视图内容也变化；
视图内容变化，原表内容也随之变化；
如果原表改名或者删除，则视图也失效。

* 创建视图
CREATE [OR REPLACE] VIEW [view_name] AS [SELECT_STATEMENT];
释义：
CREATE VIEW： 创建视图
OR REPLACE : 可选，即有同名视图的情况下，会覆盖掉原有视图
view_name ： 视图名称
SELECT_STATEMENT ：SELECT语句


创建视图，名字是c1，
mysql> create view  c1 as select name,age from class_1;
                          视图的内容，跟后面这个select语句内容是一样的

此时可以看到虚拟表c1
mysql> show tables;
+---------------+
| Tables_in_stu |
+---------------+
| c1            |

查看c1表的内容，内容跟语句select name,age from class_1;是一样的
可以把视图当成一个表，想怎么查询都可以
mysql> select * from c1;
+-----------+-----+
| name      | age |
+-----------+-----+
| Lily      |  20 |
| Baron     |  19 |
| 张三      |  10 |
| 李四      |   9 |


* 视图表的增删改查操作
  视图的增删改查操作与一般表的操作相同，使用insert update delete select即可，但是原数据表的约束条件仍然对视图产生作用。


* 查看现有视图
  show full tables in stu where table_type like 'VIEW';
                    数据库名

  mysql>   show full tables in stu where table_type like 'VIEW';
+---------------+------------+
| Tables_in_stu | Table_type |
+---------------+------------+
| c1            | VIEW       |
+---------------+------------+



* 删除视图
  drop view [IF EXISTS] 视图名；
    IF EXISTS 表示如果存在，这样即使没有指定视图也不会报错。
例如
  drop view if exists c1;


* 修改视图
  参考创建视图，将create关键字改为alter，即修改这个视图名对应的select语句
  alter view  c1 as select name,age,score from class_1;
  或
  create or replace view  c1 as select name,age,score from class_1;


* 视图作用
  1. 简化高频复杂操作的过程，就像一种对复杂操作的封装。
  2. 提高安全性，可以给不同用户提供不同的视图。
* 缺点
  1. 视图的性能相对较差，从数据库视图查询数据可能会很慢。

