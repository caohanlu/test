



3.12 函数和存储过程
存储过程和函数是,事先经过编译并存储在数据库中的一段sql语句集合，调用存储过程和函数可以简化应用开发工作，提高数据处理的效率。

在mysql中，有返回值的函数叫函数
          没返回值的函数叫存储过程【用的比较多】


3.12.1 函数创建

delimiter 自定义符号　　                                -- 如果函数体只有一条语句, begin和end可以省略, 同时delimiter也可以省略
　　create function 函数名(形参 数据类型,...) returns 返回值类型　　-- 注意是retruns
　　begin
　　　　函数体　　　　                                   -- 函数语句集,set @a 定义变量，
                                                        函数体语句必须以；结尾，
                                                        函数体不能直接写select语句，需要赋值给变量，或者直接return select语句
　　　　return val                                    -- 返回一个明确的值，只能是一个值，不能是两个多个
　　end  自定义符号
delimiter ;



释义：
delimiter   自定义mysql结束符号，默认是;
            制定除了;之外的符号作为函数书写结束标志,一般用$$或者//
            否则有可能函数里写一条select语句，以；结尾 ，mysql会以为函数定义结束了
            函数定义完后，再改回来成； 否则函数里的mysql语句是以；结尾的，就不执行了
形参列表 ： 形参名 类型   类型为mysql支持类型
返回类型:  函数返回的数据类型,mysql支持类型即可
函数体： 若干sql语句组成，如果只有一条语句也可以不写delimiter和begin,end
return: 返回指定类型返回值



e.g. 无参数的函数调用
1、
delimiter $$
create function st() returns int 
begin
return (select score from class_1 order by score desc limit 1);        limit 1了，所以只有一个值，可以return
end $$
delimiter ;

select st();                                调用函数
    mysql> select st();
    +------+
    | st() |
    +------+
    |  100 |
    +------+
    1 row in set (0.00 sec)

或
select * from class_1 where score=st();    或者作为值的提供者，调用函数


2、
delimiter $$
create function st2() returns int
begin
update class_1 set score=score+1 where id=1;  把id是1那行的分数，每执行一次函数，则加1
return 1;                                      返回1，又要必须写个返回值，所以这里随便return个1
end $$
delimiter ;

select st2();                                调用函数






e.g.  含有参数的函数调用
delimiter $$
create function queryNameById(uid int(10)) returns varchar(20)
begin
return  (select name from class_1 where id=uid);
end $$
delimiter ;

select queryNameById(1);








* 设置变量
  * 用户变量方法【全局变量】：   set @[变量名] = 值；
                           使用变量时，用@[变量名]。
  * 局部变量 ： 在函数、存储过程内部设置   declare [变量名] [变量类型] ；
                                     局部变量可以使用set赋值或者使用into关键字。
1、
如下定义全局变量
函数或者存储过程外面定义全局变量，则函数或者存储过程内部可以使用
set @a=1;  定义
select @a; 调用
        mysql> select @a;
        +------+
        | @a   |
        +------+
        |    1 |

2、
如下函数内定义局部变量
    变量名不能跟表字名重复
delimiter $$
create function get_name1() returns varchar(30)
begin
declare s varchar(30);
set s=(select name from class_1  where id=1);   或者select name from cls where id=1 into s;
return s;
end $$
delimiter ;

select get_name1();  调用函数









3.12.2存储过程创建 [用的比函数多]

创建存储过程语法与创建函数基本相同，但是没有返回值。

delimiter 自定义符号　
　　create procedure 存储过程名(形参列表)
　　begin
　　　　存储过程　　　　-- 存储过程语句集,set @a 定义变量 ， 这个增删改查随便写，因为没有返回值限制
　　end  自定义符号
delimiter ;


释义：
delimiter 自定义符号 是为了在函数内些语句方便，制定除了;之外的符号作为函数书写结束标志
形参列表 ：[ IN | OUT | INOUT ] 形参名 数据类型
          in 输入，out  输出，inout 可以输入也可以输出
存储过程： 若干sql语句组成，如果只有一条语句也可以不写delimiter和begin,end


* 存储过程三个参数的区别
  * IN 类型参数可以接收变量，也可以接收常量，  传入的参数在存储过程内部使用即可，
                                        但是在存储过程内部的修改无法传递到外部。

  * OUT 类型参数只能接收一个变量，接收的变量不能够在存储过程内部使用（内部这个变量的值为NULL），
                            但是可以在存储过程内对这个变量进行修改,因为定义的变量是全局的，所以外部可以获取这个修改后的变量的值。

  * INOUT类型参数同样只能接收一个变量，但是这个变量可以在存储过程内部使用。
                                在存储过程内部的修改，也会传递到外部。



e.g. 无参数存储过程创建和调用
创建
delimiter $$
create procedure st() 
begin 
    select name,age from class_1; 
    select name,score from class_1 order by score desc; 
end $$
delimiter ;

调用   存储过程里的两个select语句的结果，会依次展现出来
call st();







e.g. : 有参数，分别将参数类型改为IN OUT INOUT 看一下结果区别
delimiter $$
create procedure func_in ( in num int )
begin
    select num;       结果是10
    set num=100;
    select num;       结果是100
end $$
delimiter ;

set @number=10;
call func_in(@number);
select @number;       结果是10，因为in类型参数，存储过程内部修改，传递不到外面








作业：    book表拆分成3个表：图书  作家  出版社
         字段及类型自己设计，关系自定义
         建立三张表及表关系

三个表之间的三角关系如下：

 作家            1对多，一个作家写多本书          图书


        多对多                           1对多，一个出版社出版多本书
作家签约多个出版社，出版社签约多个作家


                    出版社




先建立主表作家、出版社,再建立从表图书,再建立作家、出版社的多对多关系表:

create table 作家(
id int primary key auto_increment,
name varchar(30),
sex char,
remark text
);

create table 出版社(
id int primary key auto_increment,
pname varchar(30),
address text,
phone char(16)
);

create table 图书(
id int primary key auto_increment,
bname varchar(30),
price float,
a_id int,
p_id int,
foreign key (a_id) references 作家(id),
foreign key (p_id) references 出版社(id)
);

create table 作家_出版社(
id int primary key auto_increment,
签约时间 date,
aid int,
pid int,
foreign key (aid) references 作家(id),
foreign key (pid) references 出版社(id)
);





作业：
--3. 编写一个函数，传入两个学生的ID，返回这两个学生成绩之差
delimiter $$
create function score01(uid1 int,uid2 int) returns float
begin
declare s1 float;
declare s2 float;
select score from class_1 where id=uid1 into s1;
select score from class_1 where id=uid2 into s2;
return s1-s2;
end $$
delimiter ;

select  score01(1,4);



-- 编写一个存储过程，传入一个学生姓名,在外部得到这个学生的成绩
    由于变量需要传入、传出，所以变量使用inout类型
    传入的是名字，所以使用varchar类型，而分数是浮点型，浮点型可以转换成字符串
delimiter $$
create procedure get_score(inout uname varchar(30))
begin
set uname=(select score from class_1 where name=uname);
end $$
delimiter ;

set @n="Lily";
call get_score(@n);
select @n;          此时全局变量的值被存储过程修改，就是分数了










 3.12.3 存储过程和存储函数操作

1. 调用存储过程
call 存储过程名字（[存储过程的参数[,……]])

2. 调用存储函数
select 存储函数名字（[存储过程的参数[,……]])

3. 使用show status语句查看存储过程和函数的信息
show {procedure|function} status [like’存储过程或存储函数的名称’]
显示内容：数据库、名字、类型、创建者、创建和修改日期


4.  使用show create语句查看存储过程和函数的定义
show create  {procedure|function}  存储过程或存储函数的名称

    mysql> show create function score01;
    +----------+-------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+
    | Function | sql_mode                                                                                                                                  | Create Function                                                                                                                                                                                                                                     | character_set_client | collation_connection | Database Collation |
    +----------+-------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+
    | score01  | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION | CREATE DEFINER=`root`@`localhost` FUNCTION `score01`(uid1 int,uid2 int) RETURNS float
    begin
    declare s1 float;
    declare s2 float;
    select score from class_1 where id=uid1 into s1;
    select score from class_1 where id=uid2 into s2;
    return s1-s2;
    end | utf8                 | utf8_general_ci      | utf8_general_ci    |
    +----------+-------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+
    1 row in set (0.00 sec)


5. 查看所有函数或者存储过程
   select name from mysql.proc where db='stu' and type='[procedure/function]';
        mysql> select name from mysql.proc where db='stu' and type='function';
        +---------------+
        | name          |
        +---------------+
        | get_name1     |
        | get_name2     |
        | queryNameById |


6. 删除存储过程或存储函数
DROP {PROCEDURE | FUNCTION} [IF EXISTS] sp_name




 3.12.4 函数和存储过程区别
1. 函数有且只有一个返回值，而存储过程不能有返回值。
2. 函数只能有输入参数，而存储过程可以有in,out,inout多个类型参数。
3. 存储过程中的语句功能更丰富，实现更复杂的业务逻辑，可以理解为一个按照预定步骤调用的执行过程，
   而函数中不能展示查询结果集语句，只是完成查询的工作后返回一个结果，功能针对性比较强。
4. 存储过程一般是作为一个独立的部分来执行(call调用)。
    而函数可以作为查询语句的一个部分来调用【值的提供者】。



函数、存储过程，
名字不能重复，而且创建好后，永远存在，除非删除，
不像python代码执行完了后，函数就不存在了
















3.13 事务控制

3.13.1 事务概述
MySQL 事务主要用于处理操作量大，复杂度高的数据。
比如说，在人员管理系统中，你删除一个人员，既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，
如果操作就必须同时操作成功，如果有一个不成功则所有数据都不动。
这时候数据库操作语句就构成一个事务。
事务主要处理数据的增删改操作。

* 定义
 > 一件事从开始发生到结束的过程

* 作用
> 确保数据操作过程中的安全。


3.13.2 事务操作

1. 开启事务
   mysql>begin;      # 方法1

2. 开始执行事务中的若干条SQL命令（增删改查）

3. 终止事务：
   mysql>commit;        # 事务中SQL命令都执行成功,提交到数据库,结束!
        或
   mysql>rollback;      # 有SQL命令执行失败,回滚到初始状态,即begin之前的状态，结束!
                         只能恢复insert delete update select语句，但是create、drop、alter语句无法恢复


3.13.3 事务四大特性

1. 原子性（atomicity）
>一个事务必须视为一个不可分割的最小工作单元，对于一个事务来说，不可能只执行其中的一部分操作,整个事务中的所有操作要么全部提交成功，要么全部失败回滚

2. 一致性（consistency）
> 事务完成时，数据必须处于一致状态，数据的完整性约束没有被破坏。

3. 隔离性（isolation）
> 数据库允许多个并发事务同时对其数据进行读写和修改的能力，而多个事务相互独立。
  隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。
  例如多个人，同时对某个表进行操作，

4. 持久性（durability）
> 一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。





 3.13.4 事务隔离级别

事务四大特性中的隔离性是在使用事务时最为需要注意的特性，因为隔离级别不同带来的操作现象也有区别

* 隔离级别

  - 读未提交：read uncommitted
    > 事物A和事物B，事物A未提交的数据，事物B可以读取到 【比如A、B用户通过两个终端，分别开启事物，A修改数据，还没提交，B就能读取到修改后的数据】
    > 这里读取到的数据叫做“脏数据”
    > 这种隔离级别最低，这种级别一般是在理论上存在，数据库隔离级别一般都高于该级别

  - 读已提交：read committed
    > 事物A和事物B，事物A提交的数据，事物B才能读取到
    > 这种隔离级别高于读未提交
    > 换句话说，对方事物提交之后的数据，我当前事物就能读取到
    > 这种级别可以避免“脏数据”
    > 这种隔离级别会导致“不可重复读取”，【即比如B事物刚才读取到某数据，由于事物A修改、提交，B现在又读不到了，刚才还有，现在又没了】


  - 可重复读：repeatable read                            【MySQL默认级别是这个】
    > 事务A和事务B，事务A提交之后的数据，事务B读取不到
    > 事务B是可重复读取数据，但是会导致“幻像读”
    > 这种隔离级别高于读已提交

    事物A修改、提交表的某个记录，但是事务B查看到的数据还是事物A修改之前的数据，数据不是真实的数据，
    除非事物B也修改这条记录，事物B就能看到事物A修改后的数据了【“幻像读” 】

    事物A修改某条记录时，在commit之前，事务B是无法修改这条记录的，
    除非事物A先提交commit，事务B就可以修改这条记录了，并且事务B也能看到事务A修改后的这条记录的某个字段的值了




  - 串行化：serializable
    > 事务A和事务B，事务A在操作数据库表时，事务B只能排队等待，连看都看不了
    > 这种隔离级别很少使用，吞吐量太低，用户体验差
    > 这种级别可以避免“幻像读”，每一次读取的都是数据库中真实存在数据，事务A与事务B串行，而不并发















3.14 数据库优化

3.14.1 数据库设计范式

设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式。

> 目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。

各种范式呈递次规范，越高的范式数据库冗余越小。
但是范式越高也意味着表的划分更细，一个数据库中需要的表也就越多，此时多个表联接在一起的花费是巨大的，
尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。


所以通常数据库设计遵循第一第二第三范式，以避免数据操作异常,又不至于表关系过于复杂。


范式简介：
- 第一范式： 数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等组合的数据项。
           即简单来说要求数据库中的表示二维表，每个数据元素不可再分。
           例如：
           在国内的话通常理解都是姓名是一个不可再拆分的单位，这时候就符合第一范式；
           但是在国外的话还要分为FIRST NAME和LAST NAME，这时候姓名这个字段就是还可以拆分为更小的单位的字段，就不符合第一范式了。

- 第二范式： 第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分，所有属性【字段】依赖于主属性【主键字段】。
            即选取一个能区分每个实体的属性或属性组，作为实体的唯一标识，每个属性都能被主属性筛选。
            即要设置一个区分各个记录的主键就好了。

- 第三范式： 在第二范式的基础上属性不传递依赖，即每个属性不依赖其他表的非主属性。
            要求一个表中不包含已在其它表中包含的非主键。
            其实简单来说就是合理使用外键，使不同的表中不要有重复的字段就好了。
            即从表的外键，要是其他表的主键





3.14.2  MySQL存储引擎

* **定义**： mysql数据库管理系统中用来处理表的处理器

* **基本操作**
1、查看所有存储引擎
   mysql> show engines;
2、查看已有表的存储引擎
   mysql> show create table 表名;
3、创建表指定存储引擎
   create table 表名(...)engine=MyISAM;
4、已有表指定存储引擎
   alter table 表名 engine=InnoDB;


* **常用存储引擎特点**
  **InnoDB**
  1. 支持行级锁,仅对指定的记录进行加锁，这样其它进程还是可以对同一个表中的其它记录进行操作。
  2. 支持外键、事务、事务回滚
  3. 表字段和索引同存储在一个文件中
  		 1. 表名.frm ：表结构
   		 2. 表名.ibd : 表记录及索引文件

  **MyISAM**
  1. 支持表级锁,在锁定期间，其它进程无法对该表进行写操作。如果你是写锁，则其它进程则读也不允许
  2.  表字段和索引分开存储
           1. 表名.frm ：表结构
           2. 表名.MYI : 索引文件(my index)
           3. 表名.MYD : 表记录(my data)
  

* **如何选择存储引擎**
  1. 执行查操作多的表用 MyISAM(使用InnoDB浪费资源)
  2. 执行写操作多的表用 InnoDB
  3、但是真实项目中，会用压测模拟真实场景决定
   	CREATE TABLE tb_stu(
   	id int(11) NOT NULL AUTO_INCREMENT,
   	name varchar(30) DEFAULT NULL,
   	sex varchar(2) DEFAULT NULL,
   	PRIMARY KEY (id)
   	)ENGINE=MyISAM;
  


3.14.3 字段数据类型选择
- 优先程度 ：    数字 >  时间日期 > 字符串        即，字符串在查询、比较、排序时，数据处理慢
- 同一级别 ：   占用空间小的 > 占用空间多的        即，占用空间少，数据库占磁盘页少，读写处理就更快
- 对数据存储精确不要求 float > decimal
- 如果很少被查询可以用 TIMESTAMP（时间戳实际是整形存储）


3.14.4 键的设置
- Innodb如果不设置主键也会自己设置隐含的主键，所以最好自己设置
- 尽量设置占用空间小的字段为主键
- 外键的设置用于保持数据完整性，但是会降低数据导入和操作效率，特别是高并发情况下，而且会增加维护成本
- 虽然高并发下不建议使用外键约束，但是在表关联时，建议在关联键上建立索引，以提高查找速度


3.14.5 explain语句
使用 EXPLAIN 关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句的。
这可以帮你分析你的查询语句或是表结构的性能瓶颈。、
通过explain命令可以得到:
-  表的读取顺序
-  数据读取操作的操作类型
-  哪些索引可以使用
-  哪些索引被实际使用
-  表之间的引用
-  每张表有多少行被优化器查询

例如
mysql> explain select * from class_1 where id <5;
+----+-------------+---------+------------+-------+---------------+---------+---------+------+------+----------+-------------+
| id | select_type | table   | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |
+----+-------------+---------+------------+-------+---------------+---------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | class_1 | NULL       | range | PRIMARY       | PRIMARY | 4       | NULL |    2 |   100.00 | Using where |
+----+-------------+---------+------------+-------+---------------+---------+---------+------+------+----------+-------------+


EXPLAIN主要字段解析：
* table：显示这一行的数据是关于哪张表的
* type：这是最重要的字段之一，显示查询使用了何种类型。
        从最好到最差的连接类型为system、const、eq_reg、ref、range、index和ALL，
        一般来说，得保证查询至少达到range级别，最好能达到ref。
        type中包含的值：
        - system、const： 可以将查询的变量转为常量. 如id=1; id为主键或唯一键.
        - eq_ref： 访问索引,返回某单一行的数据.(通常在联接时出现，查询使用的索引为主键或唯一键)
        - ref： 访问索引,返回某个值的数据.(可以返回多行) 通常使用=时发生
        - range： 这个连接类型使用索引返回一个范围中的行，比如使用>或<查找东西，并且该字段上建有索引时发生的情况
        - index： 以索引的顺序进行全表扫描，优点是不用排序,缺点是还要全表扫描
        - ALL： 全表扫描，应该尽量避免

* possible_keys：显示可能应用在这张表中的索引。如果为空，表示没有可能应用的索引。
* key：实际使用的索引。如果为NULL，则没有使用索引。
* key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好
* rows：MySQL认为必须检索的用来返回请求数据的行数



 3.14.6 SQL优化
- 尽量选择数据类型占空间少，在where ，group by，order by中出现的频率高的字段建立索引
- 尽量避免使用 select * ...;用具体字段代替 * ,不要返回用不到的任何字段
- 少使用like %查询，否则会全表扫描
- 控制使用自定义函数
- 单条查询最后添加 LIMIT 1，停止全表扫描
- where子句中不使用 != ,否则放弃索引全表扫描
- 尽量避免 NULL 值判断,否则放弃索引全表扫描
      优化前：select number from t1 where number is null;
      优化后：select number from t1 where number=0;
      * 在number列上设置默认值0,确保number列无NULL值
- 尽量避免 or 连接条件,否则会放弃索引进行全表扫描，可以用union代替
      优化前：select id from t1 where id=10 or id=20;
      优化后： select id from t1 where id=10 union all  select id from t1 where id=20;
- 尽量避免使用 in 和 not in,否则会全表扫描
      优化前：select id from t1 where id in(1,2,3,4);
      优化后：select id from t1 where id between 1 and 4;


3.14.7 表的拆分
表太大，查询难度也大，速度也慢
垂直拆分 ： 表中列太多，可以分为多个表，每个表是其中的几个列。
          将常查询的字段放到一起，blob或者text类型字段放到另一个表
水平拆分 ： 减少每个表的数据量，
          通过关键字进行划分【例如华东区的在一个表，华南的在另一个表】，然后拆成多个表






















3.15 数据库备份和用户管理

3.15.1 表的复制
1. 表能根据实际需求复制数据
2. 复制表时不会把KEY【主键、外键、索引】属性复制过来

    如下，把select语句查询到的数据，复制到新的表里，
    新表的增删改查，不会影响原有表，因为这是复制过来的另一张表，跟原表没关系了
    create table 新表名 select 查询命令;




3.15.2 数据库[名]备份  【这两条命令，不是sql语句，需要在linux 命令行里执行，而不是在数据库里执行】
1. 备份命令格式
> mysqldump -u  用户名  -p  源库名  >  ~/源库名.sql

    如下，在数据库里，查看有哪些库
    mysql> show databases;
    +--------------------+
    | Database           |
    +--------------------+
    | information_schema |
    | books              |
    | mysql              |
    | performance_schema |
    | stu                |
    | sys                |
    +--------------------+
    6 rows in set (0.00 sec)
    mysql> exit

    退出数据库，进入linux命令行，
    使用root用户，备份数据库books，输出重定向到当前目录下，名字叫books.sql,输入root用户的密码
    然后linux当前目录下，就可以看到这个文件了
    root@caohanlu:~/PycharmProjects/pythonProject/阶段02# mysqldump -u root -p books > books.sql
    Enter password:


2. 恢复命令格式
> mysql -u  root -p  目标库名 < 目标库名.sql

上面备份数据库books了，把数据库books删除，再创建books，则此时数据库是空的,没有任何表
drop database books;
create database books charset=utf8;
use books;
show tables;
退出mysql，到数据库备份文件所在linux目录下，恢复数据库
root@caohanlu:~/PycharmProjects/pythonProject/阶段02# mysql -u root -p books < books.sql
Enter password:
此时进入数据库，可以看到恢复的所有表、表里的数据
use books;
show tables;


3、所以备份数据库[名]后，把数据库名.sql文件给别人，别人就可以导入这个数据库了










3.15.3 用户权限管理

**开启MySQL远程连接**
更改配置文件，重启服务！
1.cd /etc/mysql/mysql.conf.d
2.sudo vi mysqld.cnf  找到43行左右,加 # 注释
   # bind-address = 127.0.0.1
3.保存退出
4.sudo service mysql restart
5.进入mysql修改用户表host值 
  use mysql;
  update user set host='%' where user='root';
6.刷新权限
  flush privileges;

【root如果不能远程，则创建、授权新的用户，即可】




**添加授权用户**
1. 用root用户登录mysql
   mysql -u root -p
2. 添加用户，              host表示该用户使用哪个源ip访问数据库， % 表示所有IP
   CREATE USER 'username'@'host' IDENTIFIED BY 'password';
                                                设置用户密

**权限列表**
all privileges 、select 、insert 、update、delete、alter等。

库.表    *.* 代表所有库的所有表
        多个表的话，用逗号隔开
        数据库名.* 表示这个数据库名下的所有表


3. 权限管理
   # 增加权限
   grant 权限列表 on 库.表 to "用户名"@"%" identified by "密码" with grant option;
        多个权限逗号隔开
   
   # 删除权限
   revoke insert,update,select on 库.表 from 'user'@'%';
   
4. 刷新权限
   flush privileges;
5. 删除用户
   drop user "用户名"@"%"




**示例**
1. 创建用户
  mysql>create user 'work'@'%' identified by '123';
2. 添加授权用户work,密码123,对所有库的所有表有所有权限
  mysql>grant all privileges on *.* to 'work'@'%' identified by '123' with grant option;
  mysql>flush privileges;

  如果对同一个用户，执行两次grant命令，授权不同的权限，表示的是增加权限，而不会把之前的权限覆盖掉

3. 删除work用户的，针对所有表的，删除权限
  mysql>revoke delete on *.* from "work"@"%";
4. 删除用户work
  drop user "work"@"%";

5. 添加用户duty，密码123,对books库中所有表有查看，插入权限【这条命令授权的同时，创建用户】
  mysql>grant select,insert on books.* to 'duty'@'%' identified by '123' with grant option;
  mysql>flush privileges;













